---
title: "Tomorrow API Call analysis trial"
format: html
editor: visual
---


## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When


```{r}
data
```


You


```{python}
import json
import requests
import pandas as pd
from datetime import datetime
import mysql.connector as sql
import psycopg2
```


# First dataset: 48 hour prediction
Retrieve data using API call

```{python}
url = "https://api.tomorrow.io/v4/timelines?location=42.3478%2C%20-71.0466&fields=temperature&fields=&units=metric&timesteps=1h&startTime=now&endTime=nowPlus48h&apikey=WgX3pBOikmlLo5MDTzfdHPaYuSqyhuMZ"
headers = {
    "accept": "application/json",
    "Accept-Encoding": "gzip"
}
response = requests.get(url, headers=headers)
print(response.text)

# Parse the JSON data into a Python object
parsed_data = json.loads(response.text)

# %% turn to Df
timelines = parsed_data['data']['timelines']
intervals = []
for timeline in timelines:
    intervals.extend(timeline['intervals'])

# Create a DataFrame from the extracted data
data = pd.DataFrame(intervals)
```



Turn DF into something readable


```{python}
# %% Turn Datetimes into columns
df = pd.DataFrame(data['startTime'])

# Split datetime into separate columns
df[['date', 'time']] = df['startTime'].str.split('T', expand=True)
df[['year', 'month', 'day']] = df['date'].str.split('-', expand=True)
df[['hour', 'minute', 'second']] = df['time'].str[:-1].str.split(':', expand=True)

# Remove unnecessary columns
df = df.drop(['startTime', 'date', 'time'], axis=1)

# %% Pull the column of temperature values
df['temp'] = data['values'].apply(lambda x: x['temperature'])
    # access values in 'values' column
    # lambda fxn: extracts value, temp, from each key, x

df
```


# Second dataset: 48 hour prediction
Retrieve data using API call

```{python}
url = "https://api.tomorrow.io/v4/timelines?location=42.3478%2C%20-71.0466&fields=temperature&fields=&units=metric&timesteps=1h&startTime=now&endTime=nowPlus48h&apikey=WgX3pBOikmlLo5MDTzfdHPaYuSqyhuMZ"
headers = {
    "accept": "application/json",
    "Accept-Encoding": "gzip"
}
response = requests.get(url, headers=headers)
print(response.text)

# Parse the JSON data into a Python object
parsed_data = json.loads(response.text)

# %% turn to Df
timelines = parsed_data['data']['timelines']
intervals = []
for timeline in timelines:
    intervals.extend(timeline['intervals'])

# Create a DataFrame from the extracted data
data = pd.DataFrame(intervals)
```



Turn DF into something readable


```{python}
# %% Turn Datetimes into columns
df = pd.DataFrame(data['startTime'])

# Split datetime into separate columns
df[['date', 'time']] = df['startTime'].str.split('T', expand=True)
df[['year', 'month', 'day']] = df['date'].str.split('-', expand=True)
df[['hour', 'minute', 'second']] = df['time'].str[:-1].str.split(':', expand=True)

# Remove unnecessary columns
df = df.drop(['startTime', 'date', 'time'], axis=1)

# %% Pull the column of temperature values
df['temp'] = data['values'].apply(lambda x: x['temperature'])
    # access values in 'values' column
    # lambda fxn: extracts value, temp, from each key, x

df
```


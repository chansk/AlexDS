df = pd.DataFrame(data['startTime'])
# Split datetime into separate columns
df[['date', 'time']] = df['startTime'].str.split('T', expand=True)
df[['year', 'month', 'day']] = df['date'].str.split('-', expand=True)
df[['hour', 'minute', 'second']] = df['time'].str[:-1].str.split(':', expand=True)
# Remove unnecessary columns
df = df.drop(['startTime', 'date', 'time'], axis=1)
# %% Pull the column of temperature values
df['temp'] = data['values'].apply(lambda x: x['temperature'])
# access values in 'values' column
# lambda fxn: extracts value, temp, from each key, x
return(df)
df2 = jsonstring_to_df(json_data)
View(df2)
conn_string = psycopg2.connect(database ="postgres", user = "postgres",
password = "Brazilll", host = "localhost",
port = "5432")
cur = conn.cursor()
# Change Df to SQL
df2.to_sql('data', con=cur, if_exists='replace',
index=False)
conn = psycopg2.connect(conn_string)
conn.autocommit = True
cursor = conn.cursor()
# Testing if can retrieve data easily
# Attention: this now working
sql1 = '''select * from data;'''
cursor.execute(sql1)
for i in cursor.fetchall():
print(i)
# conn.commit()
conn.close()
conn_string = psycopg2.connect(database ="postgres", user = "postgres",
password = "Brazilll", host = "localhost",
port = "5432")
cur = conn.cursor()
conn_string = psycopg2.connect(database ="postgres", user = "postgres",
password = "Brazilll", host = "localhost",
port = "5432")
cur = conn.cursor()
# Change Df to SQL
df2.to_sql('data', con=cur, if_exists='replace',
index=False)
conn = psycopg2.connect(conn_string
)
conn.autocommit = True
cursor = conn.cursor()
# Testing if can retrieve data easily
# Attention: this now working
sql1 = '''select * from data;'''
cursor.execute(sql1)
for i in cursor.fetchall():
print(i)
# conn.commit()
conn.close()
df=df2
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432")
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'Dataframes'
table_name = 'Trial'
# Establish connection to PostgreSQL database
conn = psycopg2.connect(
host=host,
port=port,
database=database,
user=user,
password=password
)
# Create a cursor object to execute SQL queries
cur = conn.cursor()
# Create the table in the specified schema
create_table_query = f"CREATE TABLE IF NOT EXISTS {schema}.{table_name} (col1 INT, col2 TEXT)"
cur.execute(create_table_query)
# Insert the DataFrame records into the table
for _, row in df.iterrows():
insert_query = f"INSERT INTO {schema}.{table_name} (col1, col2) VALUES ({row['col1']}, '{row['col2']}')"
cur.execute(insert_query)
# Commit the changes to the database
conn.commit()
# Close the cursor and the connection
cur.close()
conn.close()
conn.close()
cur.close()
cur.close()
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432")
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'Dataframes'
table_name = 'Trial'
# Establish connection to PostgreSQL database
conn = psycopg2.connect(
host=host,
port=port,
database=database,
user=user,
password=password
)
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'Dataframes'
table_name = 'Trial'
# Establish connection to PostgreSQL database
conn = psycopg2.connect(
host=host,
port=port,
database=database,
user=user,
password=password
)
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'Dataframes'
table_name = 'Trial'
# Establish connection to PostgreSQL database
conn = psycopg2.connect(
host=host,
port=port,
database=database,
user=user,
password=password
)
# Create a cursor object to execute SQL queries
cur = conn.cursor()
# Create the table in the specified schema
create_table_query = f"CREATE TABLE IF NOT EXISTS {schema}.{table_name} (col1 INT, col2 TEXT)"
cur.execute(create_table_query)
# Insert the DataFrame records into the table
for _, row in df.iterrows():
insert_query = f"INSERT INTO {schema}.{table_name} (col1, col2) VALUES ({row['col1']}, '{row['col2']}')"
cur.execute(insert_query)
# Commit the changes to the database
conn.commit()
# Close the cursor and the connection
cur.close()
conn.close()
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'Dataframes'
table_name = 'Trial'
# Establish connection to PostgreSQL database
conn = psycopg2.connect(
host=host,
port=port,
database=database,
user=user,
password=password
)
cur = conn.cursor()
# Create the table in the specified schema
create_table_query = f"CREATE TABLE IF NOT EXISTS {schema}.{table_name} (col1 INT, col2 TEXT)"
cur.execute(create_table_query)
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'public'
table_name = 'Trial'
# Establish connection to PostgreSQL database
conn = psycopg2.connect(
host=host,
port=port,
database=database,
user=user,
password=password
)
# Create a cursor object to execute SQL queries
cur = conn.cursor()
# Create the table in the specified schema
create_table_query = f"CREATE TABLE IF NOT EXISTS {schema}.{table_name} (col1 INT, col2 TEXT)"
cur.execute(create_table_query)
# Insert the DataFrame records into the table
for _, row in df.iterrows():
insert_query = f"INSERT INTO {schema}.{table_name} (col1, col2) VALUES ({row['col1']}, '{row['col2']}')"
cur.execute(insert_query)
# Commit the changes to the database
conn.commit()
# Close the cursor and the connection
cur.close()
conn.close()
View(df2)
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'public'
table_name = 'Trial'
# Establish connection to PostgreSQL database
conn = psycopg2.connect(
host=host,
port=port,
database=database,
user=user,
password=password
)
# Create a cursor object to execute SQL queries
cur = conn.cursor()
# Create the table in the specified schema
create_table_query = f"CREATE TABLE IF NOT EXISTS {schema}.{table_name} (col1 INT, col2 TEXT)"
cur.execute(create_table_query)
# Extract column names from the DataFrame
columns = df.columns.tolist()
# Create the INSERT query template
insert_template = f"INSERT INTO {schema}.{table_name} ({', '.join(columns)}) VALUES ({', '.join(['%s']*len(columns))})"
# Insert the DataFrame records into the table
for _, row in df.iterrows():
values = tuple(row)
cur.execute(insert_template, values)
# Commit the changes to the database
conn.commit()
# Close the cursor and the connection
cur.close()
conn.close()
df.columns.tolist()
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'public'
table_name = 'Trial'
# Establish connection to PostgreSQL database
conn = psycopg2.connect(
host=host,
port=port,
database=database,
user=user,
password=password
)
# Create a cursor object to execute SQL queries
cur = conn.cursor()
# Extract column names from the DataFrame
columns = df.columns.tolist()
# Create the table in the specified schema with dynamic column names
column_definitions = ', '.join([f"{col} TEXT" for col in columns])
create_table_query = f"CREATE TABLE IF NOT EXISTS {schema}.{table_name} ({column_definitions})"
cur.execute(create_table_query)
# Create the INSERT query template
insert_template = f"INSERT INTO {schema}.{table_name} ({', '.join(columns)}) VALUES ({', '.join(['%s']*len(columns))})"
# Insert the DataFrame records into the table
for _, row in df.iterrows():
values = tuple(row)
cur.execute(insert_template, values)
# Commit the changes to the database
conn.commit()
# Close the cursor and the connection
cur.close()
conn.close()
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'public'
table_name = 'Trial'
# Establish connection to PostgreSQL database
conn = psycopg2.connect(
host=host,
port=port,
database=database,
user=user,
password=password
)
# Create DataFrame
df2.to_sql('data', con=conn, if_exists='replace',
index=False)
conn = psycopg2.connect(conn_string
)
conn.autocommit = True
cursor = conn.cursor()
sql1 = '''select * from data;'''
cursor.execute(sql1)
for i in cursor.fetchall():
print(i)
# conn.commit()
conn.close()
from sqlalchemy import create_engine
conda install sqlalchemy
from sqlalchemy import create_engine
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'public'
table_name = 'Trial'
# conn_string = 'postgres://user:password@host/data1'
conn_stringc = database+'://'+user+':'+password+'@'+host+'/data1'
db = create_engine(conn_string)
conn = db.connect()
# Create DataFrame
df2.to_sql('data', con=conn, if_exists='replace',
index=False)
conn = psycopg2.connect(conn_string
)
conn.autocommit = True
cursor = conn.cursor()
sql1 = '''select * from data;'''
cursor.execute(sql1)
for i in cursor.fetchall():
print(i)
# conn.commit()
conn.close()
df=df2
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'public'
table_name = 'Trial'
# conn_string = 'postgres://user:password@host/data1'
conn_string = database+'://'+user+':'+password+'@'+host+'/data1'
db = create_engine(conn_string)
conn = db.connect()
# Create DataFrame
df2.to_sql('data', con=conn, if_exists='replace',
index=False)
conn = psycopg2.connect(conn_string
)
conn.autocommit = True
cursor = conn.cursor()
sql1 = '''select * from data;'''
cursor.execute(sql1)
for i in cursor.fetchall():
print(i)
# conn.commit()
conn.close()
eng_string = database+'://'+user+':'+password+'@'+host+':'+port+'/'+database
eng_string
engine = create_engine(eng_string)
eng_string
# establish connections
conn_string = eng_string
db = create_engine(conn_string)
conn = db.connect()
conn1 = psycopg2.connect(
database="Airlines_Database",
user='postgres',
password='pass',
host='127.0.0.1',
port= '5432'
)
conn1.autocommit = True
cursor = conn1.cursor()
# drop table if it already exists
cursor.execute('drop table if exists airlines_final')
sql = '''CREATE TABLE airlines_final(id int ,
day int ,airline char(20),destination char(20));'''
cursor.execute(sql)
# import the csv file to create a dataframe
data = df2
# converting data to sql
data.to_sql('airlines_final', conn, if_exists= 'replace')
# fetching all rows
sql1='''select * from airlines_final;'''
cursor.execute(sql1)
for i in cursor.fetchall():
print(i)
conn1.commit()
conn1.close()
# establish connections
conn_string = eng_string
db = create_engine(conn_string)
conn = db.connect()
conn1 = psycopg2.connect(database ="postgres", user = "postgres",
password = "Brazilll", host = "localhost",
port = "5432")
conn1.autocommit = True
cursor = conn1.cursor()
# drop table if it already exists
cursor.execute('drop table if exists airlines_final')
sql = '''CREATE TABLE airlines_final(id int ,
day int ,airline char(20),destination char(20));'''
cursor.execute(sql)
# import the csv file to create a dataframe
data = df2
# converting data to sql
data.to_sql('airlines_final', conn, if_exists= 'replace')
# fetching all rows
sql1='''select * from airlines_final;'''
cursor.execute(sql1)
for i in cursor.fetchall():
print(i)
conn1.commit()
conn1.close()
# Create a DataFrame
# df = pd.DataFrame({
#     'col1': [1, 2, 3],
#     'col2': ['A', 'B', 'C']
# })
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'public'
table_name = 'Trial'
# Create the SQLAlchemy engine
engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}')
# Convert the DataFrame to a table in the PostgreSQL database
df.to_sql(table_name, engine, schema=schema, if_exists='replace', index=False)
# Close the database connection
engine.dispose()
# Create a DataFrame
# df = pd.DataFrame({
#     'col1': [1, 2, 3],
#     'col2': ['A', 'B', 'C']
# })
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'public'
table_name = 'Trial'
# Create the SQLAlchemy engine
engine = create_engine(f'postgresql://{user}:{password}@{host}:{port}/{database}')
# Convert the DataFrame to a table in the PostgreSQL database
df.to_sql(table_name, engine, schema=schema, if_exists='replace', index=False)
# Close the database connection
engine.dispose()
# Create a DataFrame
# df = pd.DataFrame({
#     'col1': [1, 2, 3],
#     'col2': ['A', 'B', 'C']
# })
# PostgreSQL connection parameters
host = "localhost"
port = "5432"
database ="postgres"
user = "postgres"
password = "Brazilll"
schema = 'public'
table_name = 'Trial'
# Create the SQLAlchemy engine
engine = create_engine(f'postgresql://{user}:{password}@{host}:{port}/{database}')
# Convert the DataFrame to a table in the PostgreSQL database
df2.to_sql(table_name, engine, schema=schema, if_exists='replace', index=False)
# Close the database connection
engine.dispose()
# This method runs without error but not giving me any tables in DB
from sqlalchemy import MetaData, Table
# Create a new SQLAlchemy engine
engine = create_engine(f'postgresql://{user}:{password}@{host}:{port}/{database}')
# Reflect the database metadata
metadata = MetaData(bind=engine)
metadata.reflect()
# Check if the table exists in the database
if table_name in metadata.tables:
print(f"The table '{table_name}' exists in the database.")
else:
print(f"The table '{table_name}' does not exist in the database.")
# Close the database connection
engine.dispose()
import json
import requests
import pandas as pd
from datetime import datetime
import psycopg2
import datetime as dt
import pytz
import requests
import matplotlib.pyplot as plt
from sqlalchemy import create_engine
reticulate::repl_python()
for x in len(df_precint):
for x in len(df_precint):
len(df_precint)
range(len(df_precint))
len(df_precint.index)
df_precint.shape[0]
reticulate::repl_python()
